name: CI

on: [push]

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        django-version: ["3.2", "4.0"]
        exclude:
          - python-version: "3.7"
            django-version: "4.0"
    runs-on: ubuntu-latest
    name: test-py${{ matrix.python-version }}-dj${{ matrix.django-version }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - run: pip install nox
    - uses: abatilo/actions-poetry@v2.0.0
      with:
        poetry-version: 1.1.13
    - uses: actions/cache@v3
      with:
        path: .nox
        key: ${{ matrix.os }}-${{ matrix.python-version }}-nox-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.python-version }}-nox-
    - name: Run tests
      run: nox -s "tests(python='${{ matrix.python-version}}', django='${{ matrix.django-version }}')" -r
    - uses: codecov/codecov-action@v2
      with:
        name: test-py${{ matrix.python-version }}-${{ matrix.os }}

  lint:
    strategy:
      matrix:
        check: [ "types", "formatting" ]
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.8
          architecture: x64
      - run: pip install nox
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - uses: actions/cache@v3
        with:
          path: .nox
          key: ${{ runner.os }}-${{ runner.python-version }}-nox-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.python-version }}-nox-
      - run: nox -s ${{ matrix.check }} -r
